<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.cloud.cy</groupId>
    <artifactId>cloud-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>${project.artifactId}</name>
    <description>总依赖 pom 文件，管理整个项目的依赖版本</description>

    <properties>
        <revision>1.0.0-SNAPSHOT</revision>

        <!--    base setting    -->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    </properties>

    <!-- 统一依赖管理 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.cloud.cy</groupId>
                <artifactId>cloud-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <defaultGoal>install</defaultGoal>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                    <configuration>
                        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                        <source>${java.version}</source> <!-- 源代码使用的JDK版本 -->
                        <target>${java.version}</target> <!-- 需要生成的目标class文件的编译版本 -->
                        <encoding>${project.build.sourceEncoding}</encoding><!-- 字符集编码 -->
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!--  通过maven控制环境  -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <profile.active>dev</profile.active> <!-- 开发环境生效配置 -->
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profile.active>prod</profile.active> <!-- 开发环境生效配置 -->
            </properties>
        </profile>
    </profiles>

</project>